
# modules/authentication/google_utils.py
# ‚õì Zugriff auf Google Drive & Sheets via Service Account ‚Äì optimiert f√ºr AI-ZENTRALE

import os
import logging
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
from agents.Infrastructure_Agents.MemoryAgent.memory_log import log_interaction
except ImportError:
    def log_interaction(*args, **kwargs):
        pass

# üîï Google API Logging unterdr√ºcken (nur echte Fehler anzeigen)
logging.getLogger('googleapiclient.discovery_cache').setLevel(logging.ERROR)
logging.getLogger('googleapiclient.discovery').setLevel(logging.ERROR)
logging.getLogger('urllib3').setLevel(logging.ERROR)
logging.getLogger('google').setLevel(logging.ERROR)

# üìÅ Fallback-Pfad f√ºr Service-Account-Dateien
DEFAULT_SECRET_PATH = "/etc/secrets"

# üîê Erstellt Credentials aus .json-Datei f√ºr beliebigen Account
def get_service_account_credentials(account_name="office_gordonholding", scopes=None):
    try:
        scopes = scopes or []
        base_path = os.getenv("GOOGLE_SECRET_PATH", DEFAULT_SECRET_PATH)
        key_path = os.path.join(base_path, f"service_account_{account_name}.json")
        credentials = service_account.Credentials.from_service_account_file(key_path, scopes=scopes)
        return credentials
    except Exception as e:
        log_interaction("System", f"‚ùå Fehler bei Credentials f√ºr {account_name}", str(e))
        raise e

# üìÇ Google Drive-API zur√ºckgeben
def get_drive_service(account_name="office_gordonholding", log_access=False):
    scopes = ["https://www.googleapis.com/auth/drive"]
    creds = get_service_account_credentials(account_name, scopes)
    if log_access:
        log_credential_usage("Drive", account_name)
    return build("drive", "v3", credentials=creds)

# üìä Google Sheets-API zur√ºckgeben
def get_sheet_service(account_name="office_gordonholding", log_access=False):
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = get_service_account_credentials(account_name, scopes)
    if log_access:
        log_credential_usage("Sheets", account_name)
    return build("sheets", "v4", credentials=creds)

# üß† Optionales DSGVO-kompatibles Log ‚Äì nur wenn log_access=True gesetzt
def log_credential_usage(service_type, account_name):
    log_interaction(
        user="System",
        prompt=f"üîê Google Zugriff: {service_type} via {account_name}",
        response="‚úÖ Zugriff erfolgreich",
        path="memory_log.json"
    )
